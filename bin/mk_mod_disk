#! /usr/bin/perl -w

# Create a module disk.
#
# Usage:        mk_mod_disk

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# the usual fuss...

BEGIN { unshift @INC, ( $0 =~ /(.*?)((?<![^\/])bin\/)?[^\/]+$/ )[0] . "lib" }
use ReadConfig;
use AddFiles;
use MakeFATImage;

die "usage: $Script\n" if @ARGV;


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# some config data

$srcdir = "${ImagePath}";
$image = "${ImagePath}modules$ENV{modules}";

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# now we really start...

$disk = 1;
$disk = $ENV{modules} + 0 if exists $ENV{modules};

if($disk == 2) {
  @modimages = qw ( cdrom net pcmcia );
}
else {
  @modimages = qw ( fs scsi );
}

($i1, $i2) = split /\./, $ConfigData{suse_release};      

$label = "SUSE${i1}${i2}_MODS";

# create an empty image
($blocks, $block_size) = MakeFATImage($image, $label, 1);

die "$Script: failed to create DOS disk image \"$image\"\n" unless defined $blocks;

printf "$Script: image \"%s\", %u blocks a %u bytes (%u total)\n", $image, $blocks, $block_size, $blocks * $block_size;

# umount it first, just in case
SUSystem "umount /mnt 2>/dev/null";

# add the other files
SUSystem "mount -oloop -t vfat $image /mnt" and
  die "$Script: mount failed";

for (@modimages) {
  SUSystem "cp  $srcdir/${_}-mod.gz /mnt" and die "$Script: could not add ${_}-mod.gz";
}

$i3 = $i2*10;
SUSystem "touch -d $i1:$i3 /mnt/*";

print "contents of $image:\n";
system "ls -l /mnt";

SUSystem "umount /mnt" and
  die "$Script: umount failed";

Print2File $MToolsCfg, "drive r: file=\"$image\"\n" or die "$Script: oops!";
@f = `mdir r:`;
unlink $MToolsCfg;

for (@f) {
  if(/^\s*([ 0-9]+?)\s+bytes\s+free\s*$/) {
    $free = $1;
    $free =~ s/\s+//g;
    last;
  }
}

die "$Script: oops, no space on modules disk???" unless defined $free;

print "$Script: prepared modules disk \"$image\"; $free bytes free\n";

