#! /usr/bin/perl -w

# Create module disk images.
#
# Usage:        mk_modules

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# the usual fuss...

BEGIN { unshift @INC, ( $0 =~ /(.*?)((?<![^\/])bin\/)?[^\/]+$/ )[0] . "lib" }
use ReadConfig;
use MakeMinixImage;
use MakeExt2Image;
use AddFiles;
use Conv2Image;
use CompressImage;

die "usage: $Script\n" if @ARGV;

sub list_modules;

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# some config data

$srcdir = "${DataPath}initrd";
$tmpdir = "${BasePath}tmp/modules";
$image = "${ImagePath}";
$mdisk = "${BasePath}tmp/module_disks_create";

# the compressed image size varies only slightly with these; about +-1k with
# reasonable inode/block combinations

# leave that much space
$extra_size = 10;		# kbyte
$extra_inodes = 100;

# just make them large enough
$start_size = 5000;		# kbyte
$start_inodes = 1000;

$disk = 1;
$disk = $ENV{modules} + 0 if exists $ENV{modules};

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# now we really start...

# clean up
if(-d($tmpdir)) {
  SUSystem "rm -rf $tmpdir" and
    die "$Script: failed to remove old $tmpdir";
}

mkdir $tmpdir, 0755;

$fl = "modules";
$fl = $ENV{'filelist'} if exists $ENV{'filelist'};

open F, $mdisk;
while(<F>) { @modimages = split ' ', $1 if /^$disk:\s*(.+?)\s*$/ }
close F;


for (@modimages) {
  $ENV{'items'} = $_;
  AddFiles "$tmpdir/${_}-modules", "${srcdir}/$fl.file_list", $srcdir, $_ or
    die "$Script: failed to setup $_ modules image";
  list_modules "${_}-modules";
}

# strip everything
SUSystem "strip_dir $tmpdir";

$fstype = !$ENV{'nominix'} ? 'minix' : 'ext2';

for (@modimages) {
  Conv2Image "$image${_}-modules", "$tmpdir/${_}-modules/modules", $fstype, $start_size, $start_inodes, $extra_size, $extra_inodes;
  $i = CompressImage "$image${_}-modules";
  print "$Script: compressed image to \"$image${_}-modules\" ($i bytes)\n";
}


sub list_modules
{
  local $_;
  my ($dir, @m1, @m);

  $dir = shift;

  @m = `ls $tmpdir/$dir/*.o 2>/dev/null`;
  for (@m) {
    chomp;
    s#.*/##;
    s/\.o$//;
    push @m1, "$_\n"
  }

  open F, ">$tmpdir/$dir.modlist";
  print F @m1;
  close F;
}

