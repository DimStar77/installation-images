#! /usr/bin/perl -w

# Test linuxrc on the initial ram disk.
#
# Usage:        initrd_test

=head1 initrd_test

C<initrd_test> runs C<linuxrc> inside the initial ram disk. You I<must> call
C<mk_initrd_test> before.

You I<must> run this test as a 'normal' user. This requires you to have a
special 'C<sudo>' like program that can implicitly do a C<chroot> also.

This script will mount C</proc> for you and redirected C</dev/tty[0-9]> to
the terminal you run this script from.

=cut


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# the usual fuss...

BEGIN { unshift @INC, ( $0 =~ /(.*?)((?<![^\/])bin\/)?[^\/]+$/ )[0] . "lib" }
use ReadConfig;

die "usage: $Script\n" if @ARGV;

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# some config data

$dstdir = "${BasePath}test/initrd";

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# now we really start...

# we *need* our program here (to do a chroot() as 'normal' user)
die "$Script: you need the sw program to run this test...\n"
  unless $ReadConfig::SUBinary;

# watch out for chmod 1777 /tmp ...

# fix permissions for /dev/*, /etc, /tmp (accessible for all)
SUSystem "chmod -f -R a+rw $dstdir/dev/*";
SUSystem "chmod 777 $dstdir/etc";
SUSystem "chmod 1777 $dstdir/tmp";

# redirect the terminals...
chomp($t = `tty`);
for($i = 0; $i < 10; $i++) { SUSystem "cp -fa $t $dstdir/dev/tty$i" }

# mount /proc
SUSystem "mount -t proc none $dstdir/proc";

# now start it
#
# note: $ReadConfig::SUBinary -c <uid> <chroot_dir>/ <program>
#

system "xterm", "+sb", "-bg",
     "white", "-e", "$ReadConfig::SUBinary", "-c", "$<", "$dstdir/", "/linuxrc";

# umount /proc
SUSystem "umount $dstdir/proc";
