1. Overview
===========

To build a new image, you have to:

 - be root
 - put the y2image dir on a *local* file system (non-NFS)
 - on ix86 systems: linuxrc & syslinux installed

Then you can do:

  make initrd
    - build an initial ramdisk

  initrd=small make initrd
    - build a 'small' test initrd, suitable for 1.44MB boot images (for ix86)
    - *** This is not suitable for release on our CDs! ***

  make boot
    - build an boot image (for ix86)

  make yast2
    - build a root image ('yast2' for historical reasons)

  demo=live make demo
  demo=eval make demo
    - build a root image for a Live/LiveEval CD

  make boot
    - build a (2.88MB) boot image (for ix86)

  demo=live make boot
  demo=eval make boot
    - build a (2.88MB) Live/LiveEval boot image (for ix86)
    - add 'boot=small initrd=small' to get a 1.44MB *test* image

The images are stored in the y2image/image directory, the contents of the
images (except for the boot image) in the y2image/tmp directory.

There is some special magic built into the scripts that make sure that the
initrd fits on the boot disk by removing/adding some of the modules. See the
description of the *.file_list format for details.

You can select the SuSE release to build for, e.g:

  suserelease=6.4 make initrd

but note:
  - This is ignored in an autobuild environment (for obvious reasons).
  - You cannot sensibly test for 'suserelease' in the various *.file_list files
    using the 'ifenv' construct.
    Use 'suse_major_release', 'suse_minor_release' or 'suse_release' instead.


2. How to make boot disks
=========================

The various boot disks differ only slightly from the y2image stuff
(different kernel, module lists and syslinux.cfg file) and are derived from
the y2image directory using the bin/ci_boot* scripts.

o 'boot' (*the* boot image (2.88MB, 1st CD, ix86 only)

  Whithin the y2image directory, do a

    make boot

o 'yast2' boot disk (== boot image for 2nd CD, ix86 only)

  Running 'bin/ci_bootdis2 test' creates the necessary files in a temporary
  directory. Go there and run:

    boot=small make boot

o 'eide' boot disk (for special eide chipsets, ix86 only)

  Running 'bin/ci_bootdise test' creates the necessary files in a temporary
  directory. Go there and run:

    boot=small make boot

o 'laptop' boot disk (for laptops, ix86 only)

  Running 'bin/ci_bootdisl test' creates the necessary files in a temporary
  directory. Go there and run:

    boot=small make boot

o 'bootdisk' boot disk (the fallback *floppy*, ix86 only)

  Running 'bin/ci_bootdisk test' creates the necessary files in a temporary
  directory. Go there and run:

    initrd=initrd boot=small make boot

o 'modules' disk (ix86 only)

  Running 'bin/ci_bootdisk test' creates the necessary files in a temporary
  directory. Go there and run:

    make modules


3. Format of *.file_list files
==============================

o Lines starting with '#' are comments, empty lines are ignored.

    example:

    # some comment

o You can include other files:

    include <file>

    <file> is relative to the y2image/data/*/ tree.

o There are several 'if' constructs:

  the new

    if/elsif/else/endif construct

  and the old

    ifarch/ifnarch, ifdef/ifndef, ifabuild/ifnabuild, ifenv/ifnenv

  - if <expression>

    <expression> is more or less a valid perl expression except that
    variables don't have a starting '$' and are implicitly environment
    variables. The only exceptions to this are 'abuild' and 'arch'.

    example:

    if arch eq 'ppc' && (suse_release != 7.1 || lang eq 'fr')
    # ...
    elsif abuild && arch eq 'sparc'
    # ...
    else
    # ...
    endif 

    # note that 'suse_release' is actually $ENV{'suse_release'}; likewise
    # 'lang' etc. But 'abuild' and 'arch' are *not* $ENV{...}!

  - ifarch/ifnarch <arch>

    <arch> is matched against the output of 'uname -m', except for
    32-bit Intel machines where 'ix86' should be used.

    example:

      ifarch ppc
      # ...
      endif

  - ifdef/ifndef <value>

    <value> is compared with a value specified by the script that
    calls the AddFiles() function. This is currently used only
    in connection with the 'initrd=small' environment setting

    example:

      ifdef small
      # for 1.44MB disk
      else
      # for large disk
      endif

  - Both if[n]arch and if[n]def can have more than one argument which is
    treated as an 'or' relation:

    example:

      ifarch ppc axp ix86
      # arch is ppc || axp || ix86
      endif

  - ifabuild/ifnabuild

    Checks whether we run in autobuild or not.

    example:

      ifnabuild
      # not in autobuild
      endif

  - ifenv/ifnenv <env_var> <value>

    Checks of the environment variable <env_var> has the value <value>.
    Note that <vallue> must be specified; so it is not possible to test
    for a set/unset env variable.

    example:

      ifenv suse_release 6.4
      # special for SuSE 6.4
      endif

  if's can be nested to a level of at least 31. You won't get an error message if
  there are unmatched else's or endif's. In fact something like

    ifarch ix86
    # ix86 only
    else
    # !ix86
    else
    # ix86 only
    endif

  is allowed (but of questionable value).

o <package_name>:

  Unpack the selected package into a temporary directory.

  example:
  
    k_delft:

o <action> <arg1> <arg2> ...

  Do the specified action. <action> is one of these:

  - add the file/directory tree to the image:

      <args>
    ^ there's a space!

  - add a file/directory with a different name

    m <old_name> <new_name>

  - as for 'm', but continue on errors

    a <old_name> <new_name>

  - add optional files (e.g. some modules in initrd)

    M <old_name> <new_name>

  - add and gunzip files

    g <src> <dst>

  - remove a file/directory tree

    r <args>

  - create directories:

    d <args>

  - touch a file

    t <args>

  - strip

    S <args>

  - hard link (<args> as for the ln command)

    l <args>

  - symlink

    s <args>

  - apply a patch from the y2image/data/*/ tree
    (The patch *must not* contain absolute path names!)

    p <patch>

  - chown/chmod files

    c <perm> <owner> <group> <args>

  - make block device

    b <major> <minor> <name>

  - make char device

    C <major> <minor> <name>

  - add some extra files (That is, add files not from packages but from
    the y2image/data/*/ directory.)

    x <src> <dst>

  - add files from the local system (This should be used only for
    testing!)

    X <src> <dst>

